#!/usr/bin/env bash

MONO_BUILD_VERSION="0.1.0"

set -E

install_package() {
	local cwd="$(pwd)"
	local package_name="$1"
	local package_url="$2"
	shift 2

	cd "$TEMP_PATH"
	download_package "$package_name" "$package_url"
	extract_package "$package_name"
	cd "$package_name"
	build_package "$package_name" $*
	cd "$cwd"
}

download_package() {
	local package_name="$1"
	local package_url="$2"

	echo "Downloading ${package_url}..." >&2

	{ curl "$package_url" > "${package_name}.tar.bz2"
	} >$LOG_PATH 2>&1
}

extract_package() {
	local package_name="$1"

	echo "Extracting ${package_name}..." >&2

	{ tar xjvf "${package_name}.tar.bz2"
	} >$LOG_PATH 2>&1
}

build_package() {
	local package_name="$1"
	shift

	if [ "$#" -eq 0 ]; then
		local commands="standard"
	else
		local commands="$*"
	fi

	echo "Installing ${package_name}..." >&2

	for command in $commands; do
		"build_package_${command}"
	done
}

build_package_standard() {
	local package_name="$1"

	{ ./configure --prefix="$PREFIX_PATH"
	  make
	  make install
	} >$LOG_PATH 2>&1
}

build_package_mono() {
	local package_name="$1"

	local options=""
	if [[ "Darwin" = "$(uname)" ]]; then
		options="--with-glib=embedded --enable-nls=no"
	fi
	{ ./configure --prefix="$PREFIX_PATH" $options
	  make
	  make install
	} >$LOG_PATH 2>&1
}

version() {
	echo "mono-build ${MONO_BUILD_VERSION}"
}

usage() {
	version
	echo "usage: mono-build [definition] [prefix]"
	exit 1
}

DEFINITION_PATH="$1"
if [ -z "$DEFINITION_PATH" ]; then
	usage
elif [ ! -e "$DEFINITION_PATH" ]; then
	echo "mono-build: definition not found: ${DEFINITION_PATH}" >&2
	exit 1
fi

PREFIX_PATH="$2"
if [ -z "$PREFIX_PATH" ]; then
	usage
fi

SEED="$(date "+%Y%m%d%H%M%S").$$"
LOG_PATH="/tmp/mono-build.${SEED}.log"
TEMP_PATH="/tmp/mono-build.${SEED}"
CWD="$(pwd)"

export LDFLAGS="-L'${PREFIX_PATH}/lib' ${LDFLAGS}"
export CPPFLAGS="-I'${PREFIX_PATH}/include' ${CPPFLAGS}"

mkdir -p "$TEMP_PATH"
source "$DEFINITION_PATH"
rm -fr "$TEMP_PATH"